import socket
from _thread import *
from player import Player
import pickle
import random
#import ast
#import dill

server = "100.118.202.227"
port = 5555
players = []

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
    s.bind((server, port))
except socket.error as e:
    str(e)

s.listen(2)
print("Waiting for a connection, Server Started")

i = [1,2]

for item in i:
    random_x = random.randint(35,310)
    random_y = random.randint(300,430)
    new_player = Player(random_x,random_y)
    players.append(new_player)

def threaded_client(conn, player):
    conn.send(pickle.dumps(players[player]))
    #conn.send(dill.dumps(players))
    #conn.sendall(serialize_server_object(players[player]))
    reply = ""
    #random_x = random.randint(35,310)
    #random_y = random.randint(300,430)
    #new_player = Player(random_x,random_y)
    #players.append(new_player)
    while True:
        try:
            data = pickle.loads(conn.recv(2048))
            #data = dill.loads(conn.recv(2048))
            players = data
            #serialize_data = conn.recv(2048).decode("utf-8")
            #data = deserialize_server_object (serialize_data)
            #players[player] = data

            if not data:
                print("Disconnected")
                players.remove(player)
                break
            else:
                print("gggggggggggggggggggggggggggg")
 

            conn.sendall(pickle.dumps(reply))
            #conn.sendall(dill.dumps(reply))
            #conn.sendall(serialize_server_object(reply))
        except:
            break

    print("Lost connection")
    conn.close()

currentPlayer = 0

while True:

    conn, addr = s.accept()
    print("Connected to:", addr)

    start_new_thread(threaded_client, (conn, currentPlayer))
    currentPlayer += 1
