import pygame
import pytmx
import pyscroll
from player import Player
from network import Network


#creation de la fenetre 
width = 480
height = 480
pygame.init()


class Game:
    global players, tmx_data, map_data, map_layer
    def __init__(self):
       #Creation de la fenetre du jeu
       self.screen = pygame.display.set_mode((width,height))
       pygame.display.set_caption("Jeu en 2D")
       
       #chargement de la carte
       tmx_data = pytmx.util_pygame.load_pygame('carte.tmx')
       map_data = pyscroll.data.TiledMapData(tmx_data)
       map_layer = pyscroll.orthographic.BufferedRenderer(map_data,self.screen.get_size())

       #generer un joueur
       #player_position = tmx_data.get_object_by_name("player")
       #self.player = Player(player_position.x,player_position.y)
       #self.player = Player(20, 30)
       self.players = {}
       player_position = tmx_data.get_object_by_name("player")
       player_id = self.generate_player_id()
       self.players[player_id] = Player(player_position.x, player_position.y)

       #définir une liste d'obsctale
       self.obstacles = []
       for obj in tmx_data.objects:
          if obj.type == "collision":
             self.obstacles.append(pygame.Rect(obj.x,obj.y,obj.width, obj.height))
       #dessiner le groupe de calques
       for player in self.players:
            self.group = pyscroll.PyscrollGroup(map_layer=map_layer, default_layer=3)
            self.group.add(player)
   
    def generate_player_id(self):
        # utiliser le nombre actuel de joueurs comme identifiant
        return len(self.players) + 1   

    def update(self):
       self.group.update()
       
       #vérification de collision
       for sprite in self.group.sprites():
          if sprite.feet.collidelist(self.obstacles) > -1:
              sprite.move_back()

    def generation_players(self):
         for player_id, player in self.players.items():
            self.group = pyscroll.PyscrollGroup(map_layer=map_layer, default_layer=3)
            self.group.add(player)
   
    def run(self):
        clock = pygame.time.Clock()
        running = True
        n = Network()
        player_id = n.player_id
        players = n.players
        Faux_players = {}
        Faux_players = n.getP()
        if Faux_players:
           self.players.update(Faux_players)
           self.generation_players()
 
        while running:
           for player_id, player in self.players.items():
               player.save_location()
               player.handle_input()
               self.update()
               self.group.center(player.rect.center)
               self.group.draw(self.screen)
           pygame.display.flip()

           for event in pygame.event.get():
               if event.type == pygame.QUIT:
                 self.players.clear()
                 running = False
           clock.tick(60)
        pygame.quit()
